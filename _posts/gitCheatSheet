git config --global user.name "Masked Fox" //Who gets credit for changes
git config --global user.email iammaskedfx@gmail.com //What email yo
git config --global color.ui true //Pretty command line colors

git init //Initialized empty Git repository in same directory/.git

git status

git add <ReadMe.txt>
git commit -m "create a README file."

git add README.txt LICENSE.TXT
or 
git add --all

git commit -m "add LICENSE and finish README"

git log


=================================
Different Way to ADD:
=================================
git add <list of files>  //Add the list of files
git add -all             //Add all files
git add *.txt            //Add all txt files in current directory
git add docs/*.txt       //Add all txt files in docs directory
git add docs/           //Add all files in docs directory
git add "*.txt"         //Add all txt files in the whole project


=================================
git diff
=================================
diff --git a/LICENSE b/LICENSE

 git add LICENSE
 git diff               //No differences, since all changes are staged
 git diff --staged     //View staged differences
 
 
=================================
Unstaging FIles:
================================= 
git status
git reset HEAD <file>           //this will unstage the file


=================================
Discard Changes:
================================= 
git status
git checkout -- LICENSE       //Blow Away all changes since last commit
git status


=================================
Useful Commands:
================================= 
git commit -a -m "Modify readme"        //Add changes form all tracked files
git reset --soft HEAD^      //Reset into staging
git commit --amend -m "New Message"      //Change the last commit
git reset --hard HEAD^      //Undo last commit and all changes
git reset --hard HEAD^^     //Undo last 2 commits and all changes


=================================
How to Share?
================================= 
Create a Repository on Github (or any Access control of your choice)
then Github will provide us with a URL to do the following:
git remote add <name for new remote> <link provided by github>
git push -u <file> master

git remote -v     //will show us the fetch and push remotes


=================================
Pushing to Remote:
================================= 
git push -u origin master
<right here, github will ask us for our credentials in order 
to authenticate and push what we want>


=================================
Pulling from Remote:
================================= 
git pull


=================================
Working with Remotes:
================================= 
git remote add <name> <address>        //To add remotes
git remote rm <name>         //To remove remotes
git push -u <name> <branch>        //To push to remotes

==========
Git Clone:
==========
git clone (github url)

How to clone a specific Git branch?
git clone --single-branch --branch <branchname> <remote-repo>

=====
TODO:
=====
push code to remote via SSH (Because of two factor authentication)
